/** @file demo_flight_control.cpp
 *  @version 3.3
 *  @date May, 2017
 *
 *  @brief
 *  demo sample of how to use flight control APIs
 *
 *  @copyright 2017 DJI. All rights reserved.
 *
 */   

#include "dji_sdk_demo/demo_flight_control.h"
#include "dji_sdk/dji_sdk.h"

#include <geometry_msgs/Pose.h>

const float deg2rad = C_PI/180.0;
const float rad2deg = 180.0/C_PI;

ros::Subscriber rcDataSub;
sensor_msgs::Joy rc_data_;
float gear;

ros::Subscriber rcConnectionStatusSub;
void rcDataCallback(const sensor_msgs::Joy::ConstPtr& rcData);

ros::ServiceClient sdk_ctrl_authority_service;
ros::ServiceClient drone_task_service;

ros::Publisher ctrl_generic_Pub;
ros::Publisher ctrlPosYawPub;
ros::Publisher ctrlVelYawRatePub;
ros::Publisher ctrlRollPitchYawRatePub;
// global variables for subscribed topics
uint8_t flight_status = 255;
uint8_t display_mode  = 255;
sensor_msgs::NavSatFix current_gps;
geometry_msgs::Quaternion current_atti;
geometry_msgs::Pose visionPos;                //指出蓝色板的位置和取向的全局变量
void vision_pos_callback(const geometry_msgs::Pose::ConstPtr& pos_msg);

Mission square_mission;


int main(int argc, char** argv)
{
  ros::init(argc, argv, "demo_flight_control_node");
  ros::NodeHandle nh;

  // Subscribe to messages from dji_sdk_node
  ros::Subscriber attitudeSub = nh.subscribe("dji_sdk/attitude", 10, &attitude_callback);
  ros::Subscriber gpsSub      = nh.subscribe("dji_sdk/gps_position", 10, &gps_callback);
  ros::Subscriber flightStatusSub = nh.subscribe("dji_sdk/flight_status", 10, &flight_status_callback);
  ros::Subscriber displayModeSub = nh.subscribe("dji_sdk/display_mode", 10, &display_mode_callback);
  ros::Subscriber vision=nh.subscribe("/vision/pose",10,&vision_pos_callback);      //订阅蓝色板消息的订阅者
  ros::Subscriber rcDataSub =nh.subscribe("dji_sdk/rc",10,&rcDataCallback);     

  // Publish the control signal "dji_sdk/flight_control_setpoint_ENUvelocity_yawrate"
  // 位置控制发布者
  ctrlPosYawPub = nh.advertise<sensor_msgs::Joy>("/dji_sdk/flight_control_setpoint_ENUposition_yaw", 10);
  ctrl_generic_Pub = nh.advertise<sensor_msgs::Joy>("dji_sdk/flight_control_setpoint_generic", 10);
  // 速度控制发布者
  ctrlVelYawRatePub = nh.advertise<sensor_msgs::Joy>("dji_sdk/flight_control_setpoint_ENUvelocity_yawrate", 10);
  // Basic services
  sdk_ctrl_authority_service = nh.serviceClient<dji_sdk::SDKControlAuthority> ("dji_sdk/sdk_control_authority");
  drone_task_service         = nh.serviceClient<dji_sdk::DroneTaskControl>("dji_sdk/drone_task_control");

  bool obtain_control_result = obtain_control();
  bool takeoff_result = monitoredTakeoff();

  if(takeoff_result)
  {
    square_mission.reset();
    square_mission.start_gps_location = current_gps;
    square_mission.setTarget(0, 0, 10, 0);
    ROS_INFO("target_z:%f",square_mission.target_offset_z);
    square_mission.state = 1;
    ROS_INFO("##### hhh %d ....", square_mission.state);
  }

  ros::spinOnce();

  while(! (gear >0.99 ||gear < -0.99))
  {
    ros::spinOnce();
  }

  ROS_INFO("RECEIVED GEAR MESSAGE");
  
  takeoff_land(6);
  ros::spinOnce();

  return 0;
}

// Helper Functions

/*! Very simple calculation of local NED offset between two pairs of GPS
/coordinates. Accurate when distances are small.
!*/
void
localOffsetFromGpsOffset(geometry_msgs::Vector3&  deltaNed,
                         sensor_msgs::NavSatFix& target,
                         sensor_msgs::NavSatFix& origin)
{
  double deltaLon = target.longitude - origin.longitude;
  double deltaLat = target.latitude - origin.latitude;

  deltaNed.y = deltaLat * deg2rad * C_EARTH;
  deltaNed.x = deltaLon * deg2rad * C_EARTH * cos(deg2rad*target.latitude);
  deltaNed.z = target.altitude - origin.altitude;
}


geometry_msgs::Vector3 toEulerAngle(geometry_msgs::Quaternion quat)
{
  geometry_msgs::Vector3 ans;

  tf::Matrix3x3 R_FLU2ENU(tf::Quaternion(quat.x, quat.y, quat.z, quat.w));
  R_FLU2ENU.getRPY(ans.x, ans.y, ans.z);
  return ans;
}

void Mission::step()
{

  
static int stable_flag = 0;
  geometry_msgs::Vector3   localOffset;
  //float sample_time_interval = 0.1;

  float speedFactor         = 2;
  float yawThresholdInDeg   = 2;

  double xOffsetRemaining_past;
  double yOffsetRemaining_past;
  double zOffsetRemaining_past;

  float xCmd, yCmd, zCmd;// 速度命令
  float yawDesiredRad = 0;

  localOffsetFromGpsOffset(localOffset, current_gps, start_gps_location);

  double xOffsetRemaining = target_offset_x - localOffset.x;
  double yOffsetRemaining = target_offset_y - localOffset.y;
  double zOffsetRemaining = target_offset_z - localOffset.z;

static int index_t = 0;
index_t++;
if(index_t==10){
  ROS_INFO("state:%d",state);
  ROS_INFO("xoffSET:%f",xOffsetRemaining);
  ROS_INFO("yoffSET:%f",yOffsetRemaining);
  ROS_INFO("zoffSET:%f",zOffsetRemaining);
  index_t=0;
}
if(abs(yOffsetRemaining)<1&&abs(xOffsetRemaining)<1&&abs(zOffsetRemaining)<1)
{
	inbound_counter++;
}
if(inbound_counter>=50)
{
     finished=true;
	sensor_msgs::Joy controlVel;
  uint8_t flag = (DJISDK::VERTICAL_VELOCITY  |
                    DJISDK::HORIZONTAL_VELOCITY |
                    DJISDK::YAW_RATE            |
                    DJISDK::HORIZONTAL_BODY   |
                    DJISDK::STABLE_ENABLE);

  controlVel.axes.push_back(0); // y vel
  controlVel.axes.push_back(0); //x vel
  controlVel.axes.push_back(0);
  controlVel.axes.push_back(0);
  controlVel.axes.push_back(flag);
  ctrl_generic_Pub.publish(controlVel);
	return ;
}
if(target_offset_x!=0){
  xCmd =xOffsetRemaining ;//+ kd_position*(xOffsetRemaining-xOffsetRemaining_past)/sample_time_interval;
  
  if(abs(xCmd)>=0.5)
  {
    if(xCmd>0) 
    {
      xCmd = 0.5;
    }
    else
    {
     xCmd = -0.5;
    }
  }
}
else xCmd=0;
if(target_offset_y!=0){
  yCmd =yOffsetRemaining ;//+ kd_position*(xOffsetRemaining-xOffsetRemaining_past)/sample_time_interval;
  
  if(abs(yCmd)>=0.5)
  {
    if(yCmd>0) 
    {
      yCmd = 0.5;
    }
    else
    {
     yCmd = -0.5;
    }
  }
}
else yCmd=0;
if(target_offset_z!=0){
zCmd = zOffsetRemaining ;//+ kd_position*(xOffsetRemaining-xOffsetRemaining_past)/sample_time_interval;
  
  if(abs(zCmd)>=0.5)
  {
    if(zCmd>0) 
    {
      zCmd = 0.5;
    }
    else
    {
     zCmd = -0.5;
    }
  }
}
else zCmd=0;
  sensor_msgs::Joy controlVel;
  uint8_t flag = (DJISDK::VERTICAL_VELOCITY  |
                    DJISDK::HORIZONTAL_VELOCITY |
                    DJISDK::YAW_RATE            |
                    DJISDK::HORIZONTAL_BODY   |
                    DJISDK::STABLE_ENABLE);

  controlVel.axes.push_back(yCmd); // y vel
  controlVel.axes.push_back(-xCmd); //x vel
  controlVel.axes.push_back(zCmd);
  controlVel.axes.push_back(0);
  controlVel.axes.push_back(flag);
  ctrl_generic_Pub.publish(controlVel);
  
  xOffsetRemaining_past = xOffsetRemaining;
  yOffsetRemaining_past = yOffsetRemaining;
  zOffsetRemaining_past = zOffsetRemaining;
  
 // if(state == 3)
//  {
   
 // }

}

bool takeoff_land(int task)
{
  dji_sdk::DroneTaskControl droneTaskControl;

  droneTaskControl.request.task = task;

  drone_task_service.call(droneTaskControl);

  if(!droneTaskControl.response.result)
  {
    ROS_ERROR("takeoff_land fail");
    return false;
  }

  return true;

 
}

bool obtain_control()
{
  dji_sdk::SDKControlAuthority authority;
  authority.request.control_enable=1;
  sdk_ctrl_authority_service.call(authority);

  if(!authority.response.result)
  {
    ROS_ERROR("obtain control failed!");
    return false;
  }

  return true;

}

//视觉模块回传数据
void vision_pos_callback(const geometry_msgs::Pose::ConstPtr& pos_msg){
  visionPos = *pos_msg;
}

void attitude_callback(const geometry_msgs::QuaternionStamped::ConstPtr& msg)
{
  current_atti = msg->quaternion;
  geometry_msgs::Vector3 rpy = toEulerAngle(current_atti);
//  ROS_INFO("Yaw=%2.3f",rpy.z);

}

void gps_callback(const sensor_msgs::NavSatFix::ConstPtr& msg)
{
  static ros::Time start_time = ros::Time::now();
  static int start_flag = 0;
  ros::Duration elapsed_time = ros::Time::now() - start_time;
  current_gps = *msg;
  if(start_flag == 0){
    square_mission.start_gps_location = current_gps;
    start_flag = 1;
   }
  // Down sampled to 50Hz loop
  if(elapsed_time > ros::Duration(0.02))
  {
    //ROS_INFO("Elapsed time: %f; GPS: lat=%.3f, long=%.3f", elapsed_time.toSec(), msg->latitude, msg->longitude);
    start_time = ros::Time::now();
	switch(square_mission.state)
{
case 0:
break;
case 1:
if(!square_mission.finished){
square_mission.step();
}
else{
square_mission.reset();
square_mission.start_gps_location=current_gps;
//square_mission.start_local_position=current_local_pos;
square_mission.setTarget( 0, 10, 0, 0);
square_mission.state=2;
square_mission.finished=false;
}
break;

case 2:
if(!square_mission.finished){
square_mission.step();
}
else{
square_mission.reset();
square_mission.start_gps_location=current_gps;
//square_mission.start_local_position=current_local_pos;
square_mission.setTarget( 10, 0, 0, 0);
square_mission.state=3;
square_mission.finished=false;
}
break;

case 3:
if(!square_mission.finished){
square_mission.step();
}
else{
square_mission.reset();
square_mission.start_gps_location=current_gps;
//square_mission.start_local_position=current_local_pos;
square_mission.setTarget( 0, -10, 0, 0);
square_mission.state=4;
square_mission.finished=false;
}
break;

case 4:
if(!square_mission.finished){
square_mission.step();
}
else{
square_mission.reset();
square_mission.start_gps_location=current_gps;
//square_mission.start_local_position=current_local_pos;
square_mission.setTarget( -10, 0, 0, 0);
square_mission.state=5; 
square_mission.finished=false;
}
break;

case 5:
if(!square_mission.finished){
square_mission.step();
}
else{
square_mission.reset();
square_mission.start_gps_location=current_gps;
//square_mission.start_local_position=current_local_pos;
square_mission.setTarget(0,0,10,0);
square_mission.state=1;
square_mission.finished=false;
}
break;
}
  }
}

void flight_status_callback(const std_msgs::UInt8::ConstPtr& msg)
{
  flight_status = msg->data;
}

void display_mode_callback(const std_msgs::UInt8::ConstPtr& msg)
{
  display_mode = msg->data;
}

bool
monitoredTakeoff()
{
  ros::Time start_time = ros::Time::now();

  if(!takeoff_land(TASK_TAKEOFF)) {
    return false;
  }

  ros::Duration(0.01).sleep();
  ros::spinOnce();

  // Step 1.1: Spin the motor
  while (flight_status != FLIGHT_STATUS_ON_GROUND &&
         display_mode != DJISDK::DisplayMode::MODE_ENGINE_START &&
         ros::Time::now() - start_time < ros::Duration(5)) {
    ros::Duration(0.01).sleep();
    ros::spinOnce();
  }

  if(ros::Time::now() - start_time > ros::Duration(5)) {
    ROS_ERROR("Takeoff failed. Motors are not spinnning.");
    return false;
  }
  else {
    start_time = ros::Time::now();
    ROS_INFO("Motor Spinning ...");
    ros::spinOnce();
  }


  // Step 1.2: Get in to the air
  while (flight_status != FLIGHT_STATUS_IN_AIR &&
          (display_mode != DJISDK::DisplayMode::MODE_ASSISTED_TAKEOFF || display_mode != DJISDK::DisplayMode::MODE_AUTO_TAKEOFF) &&
          ros::Time::now() - start_time < ros::Duration(20)) {
    ros::Duration(0.01).sleep();
    ros::spinOnce();
  }

  if(ros::Time::now() - start_time > ros::Duration(20)) {
    ROS_ERROR("Takeoff failed. Aircraft is still on the ground, but the motors are spinning.");
    return false;
  }
  else {
    start_time = ros::Time::now();
    ROS_INFO("Ascending...");
    ros::spinOnce();
  }

  // Final check: Finished takeoff
  while ( (display_mode == DJISDK::DisplayMode::MODE_ASSISTED_TAKEOFF || display_mode == DJISDK::DisplayMode::MODE_AUTO_TAKEOFF) &&
          ros::Time::now() - start_time < ros::Duration(20)) {
    ros::Duration(0.01).sleep();
    ros::spinOnce();
  }

  if ( display_mode != DJISDK::DisplayMode::MODE_P_GPS || display_mode != DJISDK::DisplayMode::MODE_ATTITUDE)
  {
    ROS_INFO("Successful takeoff!");
    start_time = ros::Time::now();
  }
  else
  {
    ROS_ERROR("Takeoff finished, but the aircraft is in an unexpected mode. Please connect DJI GO.");
    return false;
  }

  return true;
}

/*订阅遥控器数据 ‘gear’*/
void rcDataCallback(const sensor_msgs::Joy::ConstPtr& rcData)
{
  rc_data_ = *rcData;
  gear = rc_data_.axes[4];
  // ROS_INFO("rc_data_(gear,ssdsd) :%f", rc_data_.axes[4]);
}

// Generated by gencpp from file week2test/NumberResponse.msg
// DO NOT EDIT!


#ifndef WEEK2TEST_MESSAGE_NUMBERRESPONSE_H
#define WEEK2TEST_MESSAGE_NUMBERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace week2test
{
template <class ContainerAllocator>
struct NumberResponse_
{
  typedef NumberResponse_<ContainerAllocator> Type;

  NumberResponse_()
    : answer(0)  {
    }
  NumberResponse_(const ContainerAllocator& _alloc)
    : answer(0)  {
  (void)_alloc;
    }



   typedef int32_t _answer_type;
  _answer_type answer;





  typedef boost::shared_ptr< ::week2test::NumberResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::week2test::NumberResponse_<ContainerAllocator> const> ConstPtr;

}; // struct NumberResponse_

typedef ::week2test::NumberResponse_<std::allocator<void> > NumberResponse;

typedef boost::shared_ptr< ::week2test::NumberResponse > NumberResponsePtr;
typedef boost::shared_ptr< ::week2test::NumberResponse const> NumberResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::week2test::NumberResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::week2test::NumberResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::week2test::NumberResponse_<ContainerAllocator1> & lhs, const ::week2test::NumberResponse_<ContainerAllocator2> & rhs)
{
  return lhs.answer == rhs.answer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::week2test::NumberResponse_<ContainerAllocator1> & lhs, const ::week2test::NumberResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace week2test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::week2test::NumberResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::week2test::NumberResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::week2test::NumberResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::week2test::NumberResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::week2test::NumberResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::week2test::NumberResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::week2test::NumberResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "470a19a3f8e6b2cdb8f4d6ac8875463a";
  }

  static const char* value(const ::week2test::NumberResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x470a19a3f8e6b2cdULL;
  static const uint64_t static_value2 = 0xb8f4d6ac8875463aULL;
};

template<class ContainerAllocator>
struct DataType< ::week2test::NumberResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "week2test/NumberResponse";
  }

  static const char* value(const ::week2test::NumberResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::week2test::NumberResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 answer\n"
;
  }

  static const char* value(const ::week2test::NumberResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::week2test::NumberResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.answer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NumberResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::week2test::NumberResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::week2test::NumberResponse_<ContainerAllocator>& v)
  {
    s << indent << "answer: ";
    Printer<int32_t>::stream(s, indent + "  ", v.answer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEEK2TEST_MESSAGE_NUMBERRESPONSE_H
